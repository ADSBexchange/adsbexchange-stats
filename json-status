#!/bin/bash
#
# send dumpo1090 json to local or remote server for processing
#

REMOTE_URL="https://adsbexchange.com/api/receive/"

# List all paths, IN PREFERRED ORDER, separated by a SPACE
JSON_PATHS=( "/run/readsb" "/run/dump1090-mutability" "/run/dump1090-fa" )

JSON_DIR=""

# Check the paths IN ORDER, preferring the first one we find

for i in ${!JSON_PATHS[@]}; do
	CHECK=${JSON_PATHS[$i]}

	if [ -s $CHECK ]; then
		JSON_DIR=$CHECK
		break
	fi
done

# no directories just bail
if [ "x$JSON_DIR" == "x" ]; then
  echo "No Valid Directories Found. Exiting ..."
  exit 3
fi

# uuid
UUID_FILE="/boot/adsbx-uuid"

# look for uuid - if invalid or missing genrate one
if [ -s $UUID_FILE ]; then
        UUID=$(cat $UUID_FILE)
        if ! [[ $UUID =~ ^\{?[A-F0-9a-f]{8}-[A-F0-9a-f]{4}-[A-F0-9a-f]{4}-[A-F0-9a-f]{4}-[A-F0-9a-f]{12}\}?$ ]]; then
                # invalid - remove and regenerate
                rm -f $UUID_FILE
                UUID=$(uuidgen -t)
                echo $UUID > $UUID_FILE
        fi
else
        #not found generate uuid and write
        UUID=$(uuidgen -t)
        echo $UUID > $UUID_FILE
fi

JSON_FILE="${JSON_DIR}/aircraft.json"

# Grab the current timestamp of the file
JSON_STAT=$(stat --printf="%Y" $JSON_FILE)

# Set this to a number
NEXT_JSON_READ=1

# How long to wait before uploads, minimum (in seconds)
WAIT_TIME=5

while true; do
	while [ $JSON_STAT -lt $NEXT_JSON_READ ]; do
		sleep 1
		JSON_STAT=$(stat --printf="%Y" $JSON_FILE)
	done
	# Update this for the next loop
	NEXT_JSON_READ=$(( JSON_STAT + $WAIT_TIME ))

	# Move the JSON somewhere before operating on it...
	RAND=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c10)
	TMPFILE="/var/run/json-${RAND}"
	NEWFILE="${TMPFILE}-new"

	cp $JSON_FILE $TMPFILE

	echo '{"uuid":"'$UUID'",' > $NEWFILE
	echo '"aircraft":' >> $NEWFILE
	jq '.aircraft' $TMPFILE >> $NEWFILE
	echo '}' >> $NEWFILE
  
	$(cat $NEWFILE | gzip | curl -s -o /dev/null -X POST -H "Content_Encoding: gzip" --data-binary @- $REMOTE_URL) || true

	rm $TMPFILE $NEWFILE

done

